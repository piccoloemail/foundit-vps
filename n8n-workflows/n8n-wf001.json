{
  "name": "YouTube Transcript Workflow v001",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-transcript",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -680,
        -280
      ],
      "id": "69a2f2b7-1d60-4084-8845-c121c93219cb",
      "name": "Webhook",
      "webhookId": "8b899ead-1339-425f-b574-049c47b5f1d8"
    },
    {
      "parameters": {
        "jsCode": "// Extraer video ID de la URL de YouTube\n  const inputData = $input.first().json;\n  const requestBody = inputData.body;\n\n  const youtubeUrl = requestBody.youtube_url;\n  const memoryId = requestBody.memory_id;\n\n  // Verificar datos\n  if (!youtubeUrl) {\n    throw new Error('youtube_url no encontrado');\n  }\n\n  // Extraer video ID\n  let videoId = '';\n  if (youtubeUrl.includes('watch?v=')) {\n    videoId = youtubeUrl.split('watch?v=')[1].split('&')[0];\n  } else if (youtubeUrl.includes('youtu.be/')) {\n    videoId = youtubeUrl.split('youtu.be/')[1].split('?')[0];\n  }\n\n  if (!videoId) {\n    throw new Error('No se pudo extraer video ID');\n  }\n\n  return {\n    video_id: videoId,\n    youtube_url: youtubeUrl,\n    memory_id: memoryId,\n    timestamp: new Date().toISOString(),\n    status: 'ready_for_processing'\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -460,
        -280
      ],
      "id": "ec0b826f-e61d-444e-9fae-9880be48ba94",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://www.youtube.com/oembed?url={{$json.youtube_url}}&format=json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -260,
        -280
      ],
      "id": "89a6a242-ed48-4070-8fe1-9cc0f3ae5011",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos del HTTP Request (nodo anterior)\n  const httpData = $input.first().json;\n\n  // Obtener datos originales del Code Node (buscar en el contexto)\n  const originalData = $(\"Code\").first().json;\n\n  // Combinar ambos datos\n  return {\n    // Datos originales del Code Node\n    video_id: originalData.video_id,\n    youtube_url: originalData.youtube_url,\n    memory_id: originalData.memory_id,\n    timestamp: originalData.timestamp,\n    status: originalData.status,\n\n    // Datos del HTTP Request\n    video_title: httpData.title,\n    author_name: httpData.author_name,\n    thumbnail_url: httpData.thumbnail_url\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        -280
      ],
      "id": "b796f427-7808-45c7-9f95-6cfa9116acaa",
      "name": "Code1"
    },
    {
      "parameters": {
        "fileSelector": "={{$json.file_path}}",
        "options": {
          "dataPropertyName": "audioFile"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -460,
        -60
      ],
      "id": "00e4359e-9bd7-4d65-8d85-984e416964f3",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/upload",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "8838199251774cf68a3ffe33b92083ee"
            },
            {
              "name": "content-type",
              "value": "application/octet-stream"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "audioFile",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        -60
      ],
      "id": "f65229db-2f61-43f3-9bc1-a4489fcbe3b5",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/transcript",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "8838199251774cf68a3ffe33b92083ee"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"audio_url\": \"{{$json.upload_url}}\",\n    \"language_detection\": true,\n    \"punctuate\": true,\n    \"format_text\": true\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -20,
        -60
      ],
      "id": "184fc3dc-ae51-472d-a1fb-f53a8e469d0b",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "amount": 30
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        200,
        -60
      ],
      "id": "a519cc6f-bc8b-44df-a97e-23719e57b2ee",
      "name": "Wait",
      "webhookId": "7b636027-40f9-4708-bd85-45d30c59e431"
    },
    {
      "parameters": {
        "url": "={{$json.check_url}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "8838199251774cf68a3ffe33b92083ee"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        160
      ],
      "id": "3d236700-0703-47ef-a90c-5f1f47bb9d33",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9ad96c61-5039-4ea7-9267-a1e8b143bdc2",
              "leftValue": "={{$json.status}}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -460,
        160
      ],
      "id": "0ad8d121-bd11-4715-8942-5d00d17d247b",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Formatear transcript con timestamps estilo YouTube para FoundIt.at\n  const words = $json.words || [];\n  const fullTranscript = $json.text || '';\n\n  // Crear formato de transcript estilo YouTube con líneas cortas\n  let transcriptWithTimestamps = '';\n  let currentText = '';\n  let lineStartTime = 0;\n  let lineStartIndex = 0;\n  \n  // Configuración\n  const MAX_LINE_LENGTH = 100; // Caracteres máximos por línea\n  const MAX_LINE_DURATION = 10; // Segundos máximos por línea\n  \n  words.forEach((word, index) => {\n    // Agregar palabra al texto actual\n    currentText += (currentText ? ' ' : '') + word.text;\n    \n    // Verificar si necesitamos crear una nueva línea\n    const shouldBreak = \n      currentText.length > MAX_LINE_LENGTH || // Línea muy larga\n      (word.start - lineStartTime) > MAX_LINE_DURATION || // Mucho tiempo\n      (word.text.match(/[.!?]$/) && currentText.length > 50) || // Fin de oración\n      index === words.length - 1; // Última palabra\n    \n    if (shouldBreak && currentText.trim()) {\n      // Formatear timestamp\n      const minutes = Math.floor(lineStartTime / 60);\n      const seconds = Math.floor(lineStartTime % 60);\n      const timestamp = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n      \n      // Agregar línea\n      transcriptWithTimestamps += `${timestamp}\\n${currentText.trim()}\\n`;\n      \n      // Resetear para siguiente línea\n      if (index < words.length - 1) {\n        currentText = '';\n        lineStartTime = words[index + 1]?.start || word.end;\n        lineStartIndex = index + 1;\n      }\n    }\n  });\n\n  return {\n    status: \"completed\",\n    transcript: fullTranscript,\n    transcriptWithTimestamps: transcriptWithTimestamps.trim(),\n    video_id: $node[\"Code1\"].json.video_id,\n    youtube_url: $node[\"Code1\"].json.youtube_url,\n    memory_id: $node[\"Code1\"].json.memory_id\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -20,
        140
      ],
      "id": "625db34d-0e4f-47e1-bcda-fa09b40cf7ec",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "throw new Error('Transcript not ready after 30 seconds. Try again later.');"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        200
      ],
      "id": "8da93a93-92e9-4822-8401-e77137e175bd",
      "name": "Code4"
    },
    {
      "parameters": {
        "command": "=/opt/homebrew/bin/yt-dlp -x --audio-format mp3 --ffmpeg-location /opt/homebrew/bin/ffmpeg -o \"/tmp/{{$json.video_id}}.mp3\" \"{{$json.youtube_url}}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        140,
        -280
      ],
      "id": "f150bd32-e1c5-416a-a665-c692722757a5",
      "name": "Execute Command1"
    },
    {
      "parameters": {
        "jsCode": "// Construir file_path desde Code1\n  const videoId = $node[\"Code1\"].json.video_id;\n\n  return {\n    video_id: videoId,\n    file_path: `/tmp/${videoId}.mp3`,\n    youtube_url: $node[\"Code1\"].json.youtube_url,\n    memory_id: $node[\"Code1\"].json.memory_id\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -660,
        -60
      ],
      "id": "27b6a22a-f503-4ec2-95e4-9becc8d241aa",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Debug: verificar ID del transcript\n  const transcriptId = $node[\"HTTP Request2\"].json.id;\n\n  console.log('Transcript ID to check:', transcriptId);\n\n  if (!transcriptId) {\n    throw new Error('No transcript ID found from HTTP Request2');\n  }\n\n  return {\n    transcript_id: transcriptId,\n    check_url: `https://api.assemblyai.com/v2/transcript/${transcriptId}`\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        -60
      ],
      "id": "30cd45b9-3df8-4143-b973-1cefc0104d50",
      "name": "Code5"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c610f9ef-027b-4d05-8543-bd43a8f216f5",
  "meta": {
    "instanceId": "520f8eba544bbabd46677eac7a1faea816759bdc09c7c2326a402fbd8ab808fb"
  },
  "id": "kx89t4UYDvN95LN1",
  "tags": []
}